"""
#####################################################
#                                                   #
# CIRCLEMETER   gDesklets Display                   #
#                                                   #
# This is the scripting work behind the circle      #
# meter display.                                    #
#                                                   #
# (c) Ronny Lorenz 2012                             #
#                                                   #
#####################################################
"""

"""
#####################################################
#                                                   #
# The next block of variables contains the default  #
# values for a circle meter. Change them if you are #
# not happy with the default                        #
#                                                   #
#####################################################
"""
INIT_NAME               = "CPU Load Meter"
INIT_BIND               = 0             # Bind to CPU Load ressource
INIT_LOAD               = 100           # A meter starts with 100% load
INIT_ROTATION           = 135           # angular rotation of the first element
INIT_RADIUS_X           = 40            # x radius 
INIT_RADIUS_Y           = 40            # y radius
INIT_MAX_ROTATION       = 270           # maximum angular resolution (in range 0:360
INIT_SEGMENT_NUMBER     = 30            # number of segments in the meter
INIT_SEGMENT_THICKNESS  = 7             # thickness of a segment
INIT_COLOR_MIN          = "#00ff00ff"   # color for the minimum value (i.e. 0.)
INIT_COLOR_MEAN         = "#ffff00ff"   # color for the mean value
INIT_COLOR_MAX          = "#ff0000ff"   # color for the maximum value (i.e. 100.)
INIT_COLOR_MEAN_VALUE   = 40            # mean value
INIT_LABEL_FONT         = "Sans Bold 8" #
INIT_LABEL_COLOR        = "#ff0000ff"   #
INIT_FIXED_COLOR        = False         # use fixed color for meter label or not
INIT_CLOCKWISE          = True          # direction of the meter
INIT_SIZE               = 2.5           #
INIT_LABEL_SHOW         = True          #
INIT_LABEL_FORMAT       = "%v%%"        #

# Variables that tell the script which id's are assigned in the DOM Tree
cm_array_id   = "CircleMeterArray"
cm_group_id   = "CircleMeterGroup"
cm_label_id   = "CircleMeterLabel"
cm_canvas_id  = "CircleMeterCanvas"


"""
#####################################################
#                                                   #
# All variables below are for internal function use #
# only and should never be changed                  #
#                                                   #
#####################################################
"""

update_interval = 750
pi            = 3.14159265358979323846
meter_objects = []
meter_configs = []
CircleMeter_Bindings  = [("CPU Load"),        # Contains the names of the available
                                              # resources. See function update_loads()
                                              # if you want to extend the resource list
                        ]

SVG_PATH      = "<path  id=\"bar_%d\"\
                        d=\"M%3.4f,%3.4f L%3.4f %3.4f A%d,%d 0 0,1 %3.4f,%3.4f L%3.4f %3.4f A%d,%d 0 0,0 %3.4f,%3.4f z\"\
                        fill=\"#333344\"\
                        stroke=\"#666666\"\
                        stroke-width=\"1\"/>"

#
# Values below are used as bindings for the appropriate prefs dialogs
#

CircleMeter_Size                  = INIT_SIZE
CircleMeter_StartAngle            = INIT_ROTATION
CircleMeter_MaxAngle              = INIT_MAX_ROTATION
CircleMeter_RadiusX               = INIT_RADIUS_X
CircleMeter_RadiusY               = INIT_RADIUS_Y
CircleMeter_SegmentNumber         = INIT_SEGMENT_NUMBER
CircleMeter_SegmentThickness      = INIT_SEGMENT_THICKNESS
CircleMeter_SegmentColorMeanValue = INIT_COLOR_MEAN_VALUE
CircleMeter_SegmentColorMin       = INIT_COLOR_MIN
CircleMeter_SegmentColorMean      = INIT_COLOR_MEAN
CircleMeter_SegmentColorMax       = INIT_COLOR_MAX
CircleMeter_Clockwise             = INIT_CLOCKWISE

CircleMeter_SegmentStrokeColor      = "#ffffff00"
CircleMeter_SegmentStrokeEmpty      = True
CircleMeter_SegmentStrokeFull       = False
CircleMeter_SegmentBackgroundColor  = "#999999ff"
CircleMeter_SegmentBackgroundShow   = True

CircleMeter_BackgroundColor         = "#00000000"
CircleMeter_BackgroundImageShow     = False
CircleMeter_BackgroundImageURI      = ""

#
# Variables below are filled according to selected meter
#
CircleMeter_Current_ID              = "0"
CircleMeter_Current_Bind            = "0"
CircleMeter_Current_Name            = INIT_NAME
CircleMeter_Current_LabelShow       = INIT_LABEL_SHOW
CircleMeter_Current_LabelFormat     = INIT_LABEL_FORMAT
CircleMeter_Current_LabelFont       = INIT_LABEL_FONT
CircleMeter_Current_LabelColor      = INIT_LABEL_COLOR
CircleMeter_Current_LabelFixedFont  = INIT_FIXED_COLOR

"""
#####################################################
#                                                   #
# Beginning of function code                        #
#                                                   #
#####################################################
"""

def main():
    global meter_configs
    global meter_objects
    global CircleMeter_Current_ID

    meter_configs = get_config( "meter_configs", "nothing found")

    if meter_configs is not "nothing found":
        restore_from_configs()
    else:
        # create a default meter from scratch
        meter_objects = []
        meter = SysMeter(0)
        meter.make_colors()
        meter.init_meter()
        meter_objects.append(meter)

    for idx in range(len(meter_objects)):
        UpdateMeterPosition(idx)

    update_meter_enum()
    update_meter_bind_enum()
    CircleMeter_Current_ID = "0"
    set_prefs_values() # we should always have at least one meter

    add_timer(update_interval, update_loads)

# def extract_memory_information():
#  """
#  Struct { .buffer = 99209216, .cached = 1320513536, .free = 194740224, .locked = 0,   
#  .shared = 0, .total = 2124939264, .used = 1930199040, .user = 510476288 }
#  """
#  return

def UpdateMeterPosition(idx):
    try:
        getattr(Dsp, cm_label_id)[idx].x = Unit(50, PERCENT) 
        getattr(Dsp, cm_label_id)[idx].y = Unit(50, PERCENT)
    except:
        print "Warning! Could not update CircleMeter %d's position" % idx


def update_loads():
    # put all possible ressources that should be displayable down here
    # go through all circle meters
    for i in range(len(meter_objects)):
        # check their bindings
        resource_id    = meter_objects[i]._bind
        resource_value = 0.
        # This should fail if 'id' is not specified in CircleMeter_Bindings
        try:
            resource_name = CircleMeter_Bindings[resource_id]
            # place the implementations of the different bindings here

            # CPU Load value retrieval
            if resource_id == 0:
                resource_value = float(sysinfo.cpu_load)

            # Memory consumption
            elif resource_id == 1:
                resource_value = float(sysinfo_cpu_load)

            # update the meter
            meter_objects[i]._load = resource_value
            meter_objects[i].update_meter()

            # update the meter label according to format string
            formatted = str(meter_objects[i]._label_format)
            formatted = formatted.replace("%v", "%3.2f") % resource_value
            formatted = formatted.replace("%%", "%")
            getattr(Dsp, cm_label_id)[i].value = formatted

        except:
            print "Warning! Ressource %d not covered by update process" % resource_id

    return True

def sine(alpha):
    alpha_rad = pi * (alpha - 360.0 * int(alpha/360))/180
    if alpha_rad >= pi:
        alpha_rad -= 2*pi
    return  alpha_rad\
              - (alpha_rad**3)/6\
              + (alpha_rad**5)/120\
              - (alpha_rad**7)/5040\
              + (alpha_rad**9)/362880\
              #- (alpha_rad**11)/39916800

def cosine(alpha):
    return sine(alpha + 90.0)

"""
#####################################################
#                                                   #
# Config store/restore                              #
#                                                   #
#####################################################
"""

# a list of all attributes that may be set by setAttribute() method
# of Meter objects
CircleMeterAttributeList =  [ "name",
                              "CircleMeter_Current_Bind",
                              "CircleMeter_Current_LabelShow",
                              "CircleMeter_Current_LabelFormat",
                              "CircleMeter_Current_LabelFixedFont",
                              "CircleMeter_Current_LabelColor",
                              "CircleMeter_Current_LabelFont"
                            ]

def save_configurations():
    global meter_configs

    meter_configs = []
    for idx in range(len(meter_objects)):
        config_string = (\
                          str(meter_objects[idx]._name),\
                          int(meter_objects[idx]._bind),\
                          bool(meter_objects[idx]._label_show),\
                          str(meter_objects[idx]._label_format),\
                          bool(meter_objects[idx]._fixed_font_color),\
                          str(meter_objects[idx]._label_color),\
                          str(meter_objects[idx]._label_font)
                        )
        meter_configs.append(config_string)

    set_config("meter_configs", meter_configs)



def restore_from_configs():
    global meter_objects

    # destroy all existing meters
    meter_objects = []

    # recreate new meters from config
    for i in range(len(meter_configs)):
        # print out some debugging stuff
        print "Init %d. Circle Meter: \"%s\" (from stored config)"\
                % (i+1, (meter_configs[i][0]))
        # call the constructor with the name of the meter
        meter = SysMeter(i)
        # set the attributes
        for k, v in zip(CircleMeterAttributeList, meter_configs[i]):
            meter.setAttribute(k, v)
        # initialize the meter
        meter.make_colors()
        meter.init_meter()
        # append meter to list
        meter_objects.append(meter)

"""
#####################################################
#                                                   #
# Preferences callback and other Prefs functions    #
#                                                   #
#####################################################
"""

def update_meter_enum():
    Prefs.meter_enum.items\
      = [\
          ("%s" % meter_objects[i]._name, str(i))\
              for i in range(len(meter_objects))\
        ]

def update_meter_bind_enum():
    Prefs.CircleMeter_Current_Bind.items\
      = [\
          ("%s" % CircleMeter_Bindings[i], str(i))\
              for i in range(len(CircleMeter_Bindings))\
        ]

def set_prefs_values():
    idx = int(CircleMeter_Current_ID)

    Prefs.CircleMeter_Current_LabelShow.value\
      = CircleMeter_Current_LabelShow\
      = bool(meter_objects[idx]._label_show)
    Prefs.CircleMeter_Current_LabelFormat.value\
      = CircleMeter_Current_LabelFormat\
      = str(meter_objects[idx]._label_format)
    Prefs.CircleMeter_Current_LabelFixedFont.value\
      = CircleMeter_Current_LabelFixedFont\
      = bool(meter_objects[idx]._fixed_font_color)
    Prefs.CircleMeter_Current_LabelColor.value\
      = CircleMeter_Current_LabelColor\
      = str(meter_objects[idx]._label_color)
    Prefs.CircleMeter_Current_LabelFont.value\
      = CircleMeter_Current_LabelFont\
      = str(meter_objects[idx]._label_font)
    Prefs.CircleMeter_Current_Bind.value\
      = CircleMeter_Current_Bind\
      = str(meter_objects[idx]._bind)

def preferences_callback(key, value):
    global CircleMeter_Current_ID

    idx = int(CircleMeter_Current_ID)

    if key == "CircleMeter_Current_ID":
        CircleMeter_Current_ID = value
        set_prefs_values()

    elif key == "CircleMeter_StartAngle":
        CircleMeter_StartAngle = value
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_MaxAngle":
        CircleMeter_MaxAngle = value
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_SegmentThickness":
        CircleMeter_SegmentThickness = int(value)
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_SegmentNumber":
        CircleMeter_SegmentNumber = int(value)
        meter_objects[idx].make_colors()
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_RadiusX":
        CircleMeter_RadiusX = int(value)
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_RadiusY":
        CircleMeter_RadiusY = int(value)
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_Clockwise":
        CircleMeter_Clockwise = bool(value)
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_SegmentColorMin":
        CircleMeter_SegmentColorMin = value
        meter_objects[idx].make_colors()

    elif key == "CircleMeter_SegmentColorMean":
        CircleMeter_SegmentColorMean = value
        meter_objects[idx].make_colors()

    elif key == "CircleMeter_SegmentColorMax":
        CircleMeter_SegmentColorMax = value
        meter_objects[idx].make_colors()

    elif key == "CircleMeter_SegmentColorMeanValue":
        CircleMeter_SegmentColorMeanValue = int(value)
        meter_objects[idx].make_colors()

    elif key == "CircleMeter_SegmentBackgroundColor":
        CircleMeter_SegmentBackgroundColor = value

    elif key == "CircleMeter_SegmentBackgroundShow":
        CircleMeter_SegmentBackgroundShow = bool(value)

    elif key == "CircleMeter_SegmentStrokeFull":
        CircleMeter_SegmentStrokeFull = bool(value)

    elif key == "CircleMeter_SegmentStrokeEmpty":
        CircleMeter_SegmentStrokeEmpty = bool(value)

    elif key == "CircleMeter_SegmentStrokeColor":
        CircleMeter_SegmentStrokeColor = value

    elif key == "CircleMeter_BackgroundColor":
        CircleMeter_BackgroundColor = value
        Dsp.CircleMeterGroup[0].bg_color = value

    elif key == "update_interval":
        cpu_meter_update_interval = value

    elif key == "CircleMeter_Size":
        CircleMeterSize = float(value)
        meter_objects[idx].resize()

    elif meter_objects[idx].setAttribute(key, value):
        meter_objects[idx].init_meter()

    else:
        print "Warning! Unknown prefs: %s=%s" % (key, value)

    if key == "CircleMeter_Current_LabelFixedFont":
        Prefs.CircleMeter_Current_LabelColor.enabled = value

    save_configurations()

"""
#####################################################
#                                                   #
# Meter object class definition                     #
#                                                   #
#####################################################
"""
class SysMeter:
    def __init__(self, identification):
        self._id                  = int(identification)
        self._name                = INIT_NAME
        self._bind                = INIT_BIND
        self._load                = INIT_LOAD
        self._label_show          = INIT_LABEL_SHOW
        self._label_format        = INIT_LABEL_FORMAT
        self._fixed_font_color    = INIT_FIXED_COLOR
        self._label_font          = INIT_LABEL_FONT
        self._label_color         = INIT_LABEL_COLOR
        self._colors              = []

    def setAttribute(self, key, value):
        if key == "name":
            self._name = value
        elif key == "CircleMeter_Current_Bind":
            self._bind = int(value)
        elif key == "CircleMeter_Current_LabelShow":
            self._label_show = bool(value)
        elif key == "CircleMeter_Current_LabelFormat":
            self._label_format = value
        elif key == "CircleMeter_Current_LabelFixedFont":
            self._fixed_font_color = bool(value)
        elif key == "CircleMeter_Current_LabelFont":
            self._label_font = value
        elif key == "CircleMeter_Current_LabelColor":
            self._label_color = value
        else:
            return False

        return True

    def make_colors(self):
      self._colors = []
      r1, g1, b1  = int(CircleMeter_SegmentColorMin[1:3],16),\
                    int(CircleMeter_SegmentColorMin[3:5],16),\
                    int(CircleMeter_SegmentColorMin[5:7],16)
      r2, g2, b2  = int(CircleMeter_SegmentColorMean[1:3],16),\
                    int(CircleMeter_SegmentColorMean[3:5],16),\
                    int(CircleMeter_SegmentColorMean[5:7],16)
      r3, g3, b3  = int(CircleMeter_SegmentColorMax[1:3],16),\
                    int(CircleMeter_SegmentColorMax[3:5],16),\
                    int(CircleMeter_SegmentColorMax[5:7],16)
      barrier\
        = int((float(CircleMeter_SegmentNumber)/100.0)\
          * float(CircleMeter_SegmentColorMeanValue))

      """
      The very first color
      """
      self._colors.append(CircleMeter_SegmentColorMin[0:7])

      """
      First colors in range 2...barrier-1
      """
      width = float(barrier-2)
      if width > 0.:
          dr, db, dg = float(r2 - r1), float(b2 - b1), float(g2 - g1)
          step_r, step_g, step_b = dr/width, dg/width, db/width
          for i in range(1,barrier-1):
              str_r, str_g, str_b = "","",""
              # R
              if len(hex(int(r1 + i*step_r))[2:4]) < 2:
                  str_r = "0" + hex(int(r1 + i*step_r))[2:4]
              else:
                  str_r = hex(int(r1 + i*step_r))[2:4]
              # G
              if len(hex(int(g1 + i*step_g))[2:4]) < 2:
                  str_g = "0" + hex(int(g1 + i*step_g))[2:4]
              else:
                  str_g = hex(int(g1 + i*step_g))[2:4]
              # B
              if len(hex(int(b1 + i*step_b))[2:4]) < 2:
                  str_b = "0" + hex(int(b1 + i*step_b))[2:4]
              else:
                  str_b = hex(int(b1 + i*step_b))[2:4]
              # append to list of colors
              self._colors.append("#%s%s%s" % (str_r, str_g, str_b))

      """
      The color used for the mean value
      """
      self._colors.append(CircleMeter_SegmentColorMean[0:7])

      """
      The last colors in range barrier+1, number_if_segments-1
      """
      width = float(CircleMeter_SegmentNumber-barrier-1)
      if width > 0:
          dr, db, dg = float(r3 - r2), float(b3 - b2), float(g3 - g2)
          step_r, step_g, step_b = dr/width, dg/width,db/width
          for i in range(1,CircleMeter_SegmentNumber-barrier):
              str_r, str_g, str_b = "","",""
              # R
              if len(hex(int(r2 + i*step_r))[2:4]) < 2:
                  str_r = "0" + hex(int(r2 + i*step_r))[2:4]
              else:
                  str_r = hex(int(r2 + i*step_r))[2:4]
              # G
              if len(hex(int(g2 + i*step_g))[2:4]) < 2:
                  str_g = "0" + hex(int(g2 + i*step_g))[2:4]
              else:
                  str_g = hex(int(g2 + i*step_g))[2:4]
              # B
              if len(hex(int(b2 + i*step_b))[2:4]) < 2:
                  str_b = "0" + hex(int(b2 + i*step_b))[2:4]
              else:
                  str_b = hex(int(b2 + i*step_b))[2:4]
              # append to list of colors
              self._colors.append("#%s%s%s" % (str_r, str_g, str_b))

      """
      The very last color
      """
      self._colors.append(CircleMeter_SegmentColorMax[0:7])

    #
    # initializes the svg, i.e. creates it from given attributes
    # 
    def init_meter(self):
        curr_ang = CircleMeter_StartAngle
        step_angle\
          = float(CircleMeter_MaxAngle)\
              / float(CircleMeter_SegmentNumber)

        elements = range(0, CircleMeter_SegmentNumber)
        if not CircleMeter_Clockwise: elements.reverse()

        a = CircleMeter_RadiusX - CircleMeter_SegmentThickness
        b = CircleMeter_RadiusY - CircleMeter_SegmentThickness

        # create the svg image
        svg_code = "<svg width=\"100\" height=\"100\">"
        for i in elements:
            sin_1 = sine(curr_ang)
            cos_1 = cosine(curr_ang)
            sin_2 = sine(curr_ang + step_angle)
            cos_2 = cosine(curr_ang + step_angle)

            x1 = 50 + cos_1 * (CircleMeter_RadiusX)
            y1 = 50 + sin_1 * (CircleMeter_RadiusY)
            x2 = 50 + cos_2 * (CircleMeter_RadiusX)
            y2 = 50 + sin_2 * (CircleMeter_RadiusY)
            x3 = 50 + cos_2 * a
            y3 = 50 + sin_2 * b
            x4 = 50 + cos_1 * a
            y4 = 50 + sin_1 * b
            svg_code += SVG_PATH % (i+1, x4, y4, x1, y1,
                                    CircleMeter_RadiusX,\
                                    CircleMeter_RadiusY,\
                                    x2, y2, x3, y3,\
                                    CircleMeter_RadiusX,\
                                    CircleMeter_RadiusY,\
                                    x4, y4)
            curr_ang += step_angle
        svg_code += "</svg>"

        # init and update the svg dom
        getattr(Dsp, cm_canvas_id)[0].graphics = svg_code
        getattr(Dsp, cm_canvas_id)[0].dom.update()
        # update the label
        getattr(Dsp, cm_label_id)[0].color     = self._label_color
        getattr(Dsp, cm_label_id)[0].font      = self._label_font

    def update_meter(self):
        border\
          = int((float(CircleMeter_SegmentNumber) / 100.0)
              * float(self._load))

        if CircleMeter_SegmentBackgroundShow:
            bg_color = CircleMeter_SegmentBackgroundColor[0:7]
        else:
            bg_color = "None"

        if CircleMeter_SegmentStrokeFull:
            stroke_full_width = 1
            stroke_full_color = CircleMeter_SegmentStrokeColor[0:7]
        else:
            stroke_full_width = 0
            stroke_full_color = "None"

        if CircleMeter_SegmentStrokeEmpty:
            stroke_empty_width = 1
            stroke_empty_color = CircleMeter_SegmentStrokeColor[0:7]
        else:
            stroke_empty_width = 0
            stroke_empty_color = "None"

        for i in range(0, border):
            bar = getattr(Dsp, cm_canvas_id)[self._id].dom.get(\
                    "bar_%d" % (i+1))

            if i < len(self._colors):
                bar["fill"] = self._colors[i]
            else:
                bar["fill"] = bg_color

            bar["stroke"]       = stroke_full_color
            bar["stroke-width"] = stroke_full_width

        if border < CircleMeter_SegmentNumber:
            for i in range(border, CircleMeter_SegmentNumber):
                bar = getattr(Dsp, cm_canvas_id)[self._id].dom.get(\
                        "bar_%d" % (i+1))

                bar["fill"]         = bg_color
                bar["stroke"]       = stroke_empty_color
                bar["stroke-width"] = stroke_empty_width

        if not self._fixed_font_color:
            getattr(Dsp, cm_label_id)[self._id].color\
              = self._colors[border]

        getattr(Dsp, cm_canvas_id)[self._id].dom.update()

    def resize(self):
        getattr(Dsp, cm_canvas_id)[self._id].width\
          = Unit(CircleMeter_Size, CM)
        getattr(Dsp, cm_canvas_id)[0].height\
          = Unit(CircleMeter_Size, CM)


main()
