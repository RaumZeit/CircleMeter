"""
#####################################################
#                                                   #
# CIRCLEMETER   gDesklets Display                   #
#                                                   #
# This is the scripting work behind the circle      #
# meter display.                                    #
#                                                   #
# (c) Ronny Lorenz 2012                             #
#                                                   #
#####################################################
"""

"""
#####################################################
#                                                   #
# The next block of variables contains the default  #
# values for a circle meter. Change them if you are #
# not happy with the default                        #
#                                                   #
#####################################################
"""
INIT_NAME               = "Default Meter"
INIT_BIND               = 0             # Bind to CPU Load ressource
INIT_LOAD               = 100           # A meter starts with 100% load
INIT_ROTATION           = 135           # angular rotation of the first element
INIT_RADIUS_X           = 40            # x radius 
INIT_RADIUS_Y           = 40            # y radius
INIT_MAX_ROTATION       = 270           # maximum angular resolution (in range 0:360
INIT_SEGMENT_NUMBER     = 30            # number of segments in the meter
INIT_SEGMENT_THICKNESS  = 7             # thickness of a segment
INIT_COLOR_MIN          = "#00ff00ff"   # color for the minimum value (i.e. 0.)
INIT_COLOR_MEAN         = "#ffff00ff"   # color for the mean value
INIT_COLOR_MAX          = "#ff0000ff"   # color for the maximum value (i.e. 100.)
INIT_COLOR_MEAN_VALUE   = 40            # mean value
INIT_LABEL_FONT         = "Sans Bold 8" #
INIT_LABEL_COLOR        = "#ff0000ff"   #
INIT_FIXED_COLOR        = False         # use fixed color for meter label or not
INIT_CLOCKWISE          = True          # direction of the meter
INIT_SIZE               = 2.5           #
INIT_LABEL_SHOW         = True          #
INIT_LABEL_FORMAT       = "%v%%"        #

# Variables that tell the script which id's are assigned in the DOM Tree
cm_array_id   = "CircleMeterArray"
cm_group_id   = "CircleMeterGroup"
cm_label_id   = "CircleMeterLabel"
cm_canvas_id  = "CircleMeterCanvas"

cm_prefs_bound_resource_id    = "CircleMeter_Current_Bind"
cm_prefs_label_show_id        = "CircleMeter_Current_LabelShow"
cm_prefs_label_format_id      = "CircleMeter_Current_LabelFormat"
cm_prefs_label_fixed_font_id  = "CircleMeter_Current_LabelFixedFont"
cm_prefs_label_color_id       = "CircleMeter_Current_LabelColor"
cm_prefs_label_font_id        = "CircleMeter_Current_LabelFont"
cm_prefs_name_id              = "CircleMeter_Current_Name"

"""
#####################################################
#                                                   #
# All variables below are for internal function use #
# only and should never be changed                  #
#                                                   #
#####################################################
"""

update_interval = 750
pi            = 3.14159265358979323846
meter_objects = []
meter_configs = []
meter_loads   = []
CircleMeter_Bindings  = [ ("CPU Load"),                   # Contains the names of the available
                          ("RAM used (%) (incl. cache)"), # resources. See function update_loads()
                          ("RAM used (%) (w/o cache)"),   # if you want to extend the resource list
                          ("RAM used (bytes)"),
                          ("RAM used (bytes)")
                        ]

CircleMeter_BaseItems = [ ("Millionth\t\t[ 1 micro\t= 1e-6\t]"),
                          ("Thousandth\t[ 1 milli\t= 1e-3\t]"),
                          ("Normal"),
                          ("Thousands\t[ 1 kilo\t= 1e3\t]"),
                          ("Millions\t\t[ 1 Mega\t= 1e6\t]"),
                          ("Billions\t\t[ 1 Giga\t= 1e9\t]"),
                          ("Trillions\t\t[ 1 Tera\t= 1e12\t]"),
                        ]

# a list of all attributes that may be set by setAttribute() method
# of Meter objects
CircleMeterAttributeList =  [ "CircleMeter_Current_Name",
                              "CircleMeter_Current_Bind",
                              "CircleMeter_Current_LabelShow",
                              "CircleMeter_Current_LabelFormat",
                              "CircleMeter_Current_LabelFixedFont",
                              "CircleMeter_Current_LabelColor",
                              "CircleMeter_Current_LabelFont"
                            ]

SVG_PATH      = "<path  id=\"bar_%d\"\
                        d=\"M%3.4f,%3.4f L%3.4f %3.4f A%d,%d 0 0,1 %3.4f,%3.4f L%3.4f %3.4f A%d,%d 0 0,0 %3.4f,%3.4f z\"\
                        fill=\"#333344\"\
                        stroke=\"#666666\"\
                        stroke-width=\"1\"/>"

#
# Values below are used as bindings for the appropriate prefs dialogs
#

CircleMeter_Size                  = INIT_SIZE
CircleMeter_StartAngle            = INIT_ROTATION
CircleMeter_MaxAngle              = INIT_MAX_ROTATION
CircleMeter_RadiusX               = INIT_RADIUS_X
CircleMeter_RadiusY               = INIT_RADIUS_Y
CircleMeter_SegmentNumber         = INIT_SEGMENT_NUMBER
CircleMeter_SegmentThickness      = INIT_SEGMENT_THICKNESS
CircleMeter_SegmentColorMeanValue = INIT_COLOR_MEAN_VALUE
CircleMeter_SegmentColorMin       = INIT_COLOR_MIN
CircleMeter_SegmentColorMean      = INIT_COLOR_MEAN
CircleMeter_SegmentColorMax       = INIT_COLOR_MAX
CircleMeter_Clockwise             = INIT_CLOCKWISE

CircleMeter_SegmentStrokeColor      = "#ffffff00"
CircleMeter_SegmentStrokeEmpty      = True
CircleMeter_SegmentStrokeFull       = False
CircleMeter_SegmentBackgroundColor  = "#999999ff"
CircleMeter_SegmentBackgroundShow   = True

CircleMeter_BackgroundColor         = "#00000000"
CircleMeter_BackgroundImageShow     = False
CircleMeter_BackgroundImageURI      = ""

#
# Variables below are filled according to selected meter
#
CircleMeter_Current_ID              = "0"
CircleMeter_Current_Bind            = "0"
CircleMeter_Current_Name            = INIT_NAME
CircleMeter_Current_LabelShow       = INIT_LABEL_SHOW
CircleMeter_Current_LabelFormat     = INIT_LABEL_FORMAT
CircleMeter_Current_LabelFont       = INIT_LABEL_FONT
CircleMeter_Current_LabelColor      = INIT_LABEL_COLOR
CircleMeter_Current_LabelFixedFont  = INIT_FIXED_COLOR
CircleMeter_Current_Min             = 0
CircleMeter_Current_MinBase         = "2"
CircleMeter_Current_Max             = 100
CircleMeter_Current_MaxBase         = "2"
CircleMeter_Current_Mean            = 50
CircleMeter_Current_MeanBase        = "2"

substitution_info = "%v\t...\tPlain value\n\
%B\t...\tSI converted value, e.g. 42k\n\
%b\t...\tSI converted value + \"bit => Byte\"\n\
%%\t...\tPercent sign, i.e. %"

"""
#####################################################
#                                                   #
# Beginning of function code                        #
#                                                   #
#####################################################
"""

def main():
    global meter_configs
    global meter_objects
    global CircleMeter_Current_ID

    meter_objects = []
    meter_configs = get_config( "meter_configs", "x")

    # load config if it is present
    if meter_configs is not "x":
        restore_from_configs()

    # create a default meter from scratch otherwise
    else:
        add_meter()

    update_meter_bind_enum()

    getattr(Prefs, "CircleMeter_Current_MinBase").items\
      = [\
          ("%s" % CircleMeter_BaseItems[i], str(i))\
              for i in range(len(CircleMeter_BaseItems))\
        ]

    getattr(Prefs, "CircleMeter_Current_MeanBase").items\
      = [\
          ("%s" % CircleMeter_BaseItems[i], str(i))\
              for i in range(len(CircleMeter_BaseItems))\
        ]

    getattr(Prefs, "CircleMeter_Current_MaxBase").items\
      = [\
          ("%s" % CircleMeter_BaseItems[i], str(i))\
              for i in range(len(CircleMeter_BaseItems))\
        ]


    add_timer(update_interval, update_load_timer)

def update_load_timer():
    global meter_objects, meter_loads
    # put all possible ressources that should be displayable down here
    # go through all circle meters
    fill_load_list()
    for i in range(len(meter_objects)):
        # check their bindings
        resource_id    = meter_objects[i]._bind
        resource_value = meter_loads[int(resource_id)]
        # update the meter
        meter_objects[i]._load = resource_value
        meter_objects[i].update_meter()

        # update the meter label according to format string
        getattr(Dsp, cm_label_id)[i].value\
          = label_formatter(meter_objects[i]._label_format, resource_value)


    add_timer(update_interval, update_load_timer)

    return False

"""
#####################################################
#                                                   #
# Misc. helper functions                            #
#                                                   #
#####################################################
"""
def sine(alpha):
    alpha_rad = pi * (alpha - 360.0 * int(alpha/360))/180
    if alpha_rad >= pi:
        alpha_rad -= 2*pi
    return  alpha_rad\
              - (alpha_rad**3)/6\
              + (alpha_rad**5)/120\
              - (alpha_rad**7)/5040\
              + (alpha_rad**9)/362880\
              #- (alpha_rad**11)/39916800

def cosine(alpha):
    return sine(alpha + 90.0)

def hx(dc):
    return hex(int(dc))[2:4]

"""
#####################################################
#                                                   #
# Config store/restore                              #
#                                                   #
#####################################################
"""
def save_configurations():
    global meter_configs

    meter_configs = []
    for idx in range(len(meter_objects)):
        config_string = (\
                          str(meter_objects[idx]._name),\
                          int(meter_objects[idx]._bind),\
                          bool(meter_objects[idx]._label_show),\
                          str(meter_objects[idx]._label_format),\
                          bool(meter_objects[idx]._fixed_font_color),\
                          str(meter_objects[idx]._label_color),\
                          str(meter_objects[idx]._label_font)
                        )
        meter_configs.append(config_string)

    set_config("meter_configs", meter_configs)



def restore_from_configs():
    global meter_objects

    # destroy all existing meters
    meter_objects = []

    # recreate new meters from config
    for i in range(len(meter_configs)):
        # print out some debugging stuff
        print "Init %d. Circle Meter: \"%s\" (from stored config)"\
                % (i+1, (meter_configs[i][0]))
        add_meter(CircleMeterAttributeList, meter_configs[i])


"""
#####################################################
#                                                   #
# Add / Update / Remove Callbacks                   #
#                                                   #
#####################################################
"""
def add_meter(keys = None, values = None):
    global meter_objects, CircleMeter_Current_ID
    
    idx = len(meter_objects)
    getattr(Dsp, cm_array_id).length = idx + 1

    m = SysMeter(idx)
    if keys != None and values != None and len(keys) > 0:
        if len(keys) == len(values):
            for k,v in zip(keys, values):
                m.setAttribute(k,v)
    else:
        m.setAttribute("CircleMeter_Current_Name", CircleMeter_Current_Name)

    m.make_colors()
    m.init_meter()
    meter_objects.append(m)
    UpdateMeterPosition(idx)
    update_meter_enum()
    CircleMeter_Current_ID = str(idx)
    getattr(Prefs, "meter_enum2").value = CircleMeter_Current_ID
    set_prefs_values()

def update_meter():
    idx = int(CircleMeter_Current_ID)
    meter_objects[idx]._name = CircleMeter_Current_Name
    update_meter_enum()

def remove_meter():
    global meter_objects, CircleMeter_Current_ID

    if len(meter_objects) > 1:
        idx = int(CircleMeter_Current_ID)
        meter_objects.pop(idx)
        if idx -1 < 0:
            CircleMeter_Current_ID = str(0)
        else:
            CircleMeter_Current_ID = str(idx-1)
        save_configurations()
        restore_from_configs()

"""
#####################################################
#                                                   #
# Label formatting and Load value preparation       #
#                                                   #
#####################################################
"""
def label_formatter(label, value):
    template  = str(label)
    formatted = ""

    # begin pattern replacement
    start = 0
    p = template.find("%", start)

    while p != -1:
        c = template[p+1:p+2]
        formatted = formatted + template[start:p]

        # value in float format
        if c == "v":
            formatted = formatted + "%.2f" % float(value)

        # SI conversion
        elif c == "b" or c == "B":
            suffixes = ["k","M","G","T","E"]
            v = int(value)
            if c == "b": v = int(v / 8)
            for i in range(0,len(suffixes)):
                a,b = divmod((v), 10**3)
                if a < 10**3:
                    formatted = formatted + ("%d.%03d" + suffixes[i]) % (a,b)
                    break
                v = v // 10**3

        # percent sign
        elif c == "%":  formatted = formatted +  "%"

        # prepare next round
        start = start + p + 2
        p = template.find("%", start)

    formatted = formatted + template[start:len(template)]

    # done
    return formatted

def fill_load_list():
    global meter_loads
    meter_loads = []
    load_value  = 0.

    # [0] fill in CPU load
    load_value = float(sysinfo.cpu_load)
    meter_loads.append(load_value)

    # [1] fill in memory totally used (incl. cache)
    load_value = sysinfo.memory.total-sysinfo.memory.free
    load_value = 100.*float(load_value)/float(sysinfo.memory.total)
    meter_loads.append(load_value)

    # [2] fill in memory used (without cache)
    load_value = sysinfo.memory.total\
                  - sysinfo.memory.free\
                  - sysinfo.memory.cached\
                  - sysinfo.memory.buffer
    load_value = 100.*float(load_value)/float(sysinfo.memory.total)
    meter_loads.append(load_value)

    # [3] fill in memory totally used (incl. cache)
    load_value = sysinfo.memory.total-sysinfo.memory.free
    meter_loads.append(load_value)

    # [4] fill in memory totally used (incl. cache)
    load_value = sysinfo.memory.total\
                  - sysinfo.memory.free\
                  - sysinfo.memory.cached\
                  - sysinfo.memory.buffer
    meter_loads.append(load_value)



def UpdateMeterPosition(idx):
    dx = Unit(idx*CircleMeter_Size, CM)
    dy = Unit(0, CM)
    try:
        getattr(Dsp, cm_label_id)[idx].x = Unit(50, PERCENT)
        getattr(Dsp, cm_label_id)[idx].y = Unit(50, PERCENT)
        getattr(Dsp, cm_group_id)[idx].x = dx
        getattr(Dsp, cm_group_id)[idx].y = dy
        getattr(Dsp, cm_canvas_id)[idx].width\
          = Unit(CircleMeter_Size, CM)
        getattr(Dsp, cm_canvas_id)[idx].height\
          = Unit(CircleMeter_Size, CM)
    except:
        print "Warning! Could not update CircleMeter %d's position" % idx


def update_meter_settings_global():
    for idx in range(len(meter_objects)):
        meter_objects[idx].init_meter()
        meter_objects[idx].make_colors()



"""
#####################################################
#                                                   #
# Preferences callback and other Prefs functions    #
#                                                   #
#####################################################
"""

def update_meter_enum():
    getattr(Prefs, "meter_enum").items\
      = getattr(Prefs, "meter_enum2").items\
      = getattr(Prefs, "meter_enum3").items\
      = [\
          ("%s" % meter_objects[i]._name, str(i))\
              for i in range(len(meter_objects))\
        ]

def update_meter_bind_enum():
    Prefs.CircleMeter_Current_Bind.items\
      = [\
          ("%s" % CircleMeter_Bindings[i], str(i))\
              for i in range(len(CircleMeter_Bindings))\
        ]

def set_prefs_values():
    idx = int(CircleMeter_Current_ID)

    getattr(Prefs, cm_prefs_label_show_id).value\
      = CircleMeter_Current_LabelShow\
      = bool(meter_objects[idx]._label_show)
    getattr(Prefs, cm_prefs_label_format_id).value\
      = CircleMeter_Current_LabelFormat\
      = str(meter_objects[idx]._label_format)
    getattr(Prefs, cm_prefs_label_fixed_font_id).value\
      = CircleMeter_Current_LabelFixedFont\
      = bool(meter_objects[idx]._fixed_font_color)
    getattr(Prefs, cm_prefs_label_color_id).value\
      = CircleMeter_Current_LabelColor\
      = str(meter_objects[idx]._label_color)
    getattr(Prefs, cm_prefs_label_font_id).value\
      = CircleMeter_Current_LabelFont\
      = str(meter_objects[idx]._label_font)
    getattr(Prefs, cm_prefs_bound_resource_id).value\
      = CircleMeter_Current_Bind\
      = str(meter_objects[idx]._bind)
    getattr(Prefs, cm_prefs_name_id).value\
      = CircleMeter_Current_Name\
      = str(meter_objects[idx]._name)
    getattr(Prefs, "CircleMeter_Current_Min").value\
      = CircleMeter_Current_Min\
      = int(meter_objects[idx]._load_min)
    getattr(Prefs, "CircleMeter_Current_Mean").value\
      = CircleMeter_Current_Mean\
      = int(meter_objects[idx]._load_mean)
    getattr(Prefs, "CircleMeter_Current_Max").value\
      = CircleMeter_Current_Max\
      = int(meter_objects[idx]._load_max)

def preferences_callback(key, value):
    global CircleMeter_Current_ID
    global CircleMeter_Current_Mean, CircleMeter_Current_Max, CircleMeter_Current_Min

    idx = int(CircleMeter_Current_ID)

    if key == "CircleMeter_Current_ID":
        CircleMeter_Current_ID = value
        set_prefs_values()

    elif key == "CircleMeter_StartAngle":
        CircleMeter_StartAngle = value
        update_meter_settings_global()

    elif key == "CircleMeter_MaxAngle":
        CircleMeter_MaxAngle = value
        update_meter_settings_global()

    elif key == "CircleMeter_SegmentThickness":
        CircleMeter_SegmentThickness = int(value)
        update_meter_settings_global()

    elif key == "CircleMeter_SegmentNumber":
        CircleMeter_SegmentNumber = int(value)
        update_meter_settings_global()

    elif key == "CircleMeter_RadiusX":
        CircleMeter_RadiusX = int(value)
        update_meter_settings_global()

    elif key == "CircleMeter_RadiusY":
        CircleMeter_RadiusY = int(value)
        update_meter_settings_global()

    elif key == "CircleMeter_Clockwise":
        CircleMeter_Clockwise = bool(value)
        update_meter_settings_global()

    elif key == "CircleMeter_SegmentColorMin":
        CircleMeter_SegmentColorMin = value
        update_meter_settings_global()

    elif key == "CircleMeter_SegmentColorMean":
        CircleMeter_SegmentColorMean = value
        update_meter_settings_global()

    elif key == "CircleMeter_SegmentColorMax":
        CircleMeter_SegmentColorMax = value
        update_meter_settings_global()

    elif key == "CircleMeter_SegmentBackgroundColor":
        CircleMeter_SegmentBackgroundColor = value

    elif key == "CircleMeter_SegmentBackgroundShow":
        CircleMeter_SegmentBackgroundShow = bool(value)

    elif key == "CircleMeter_SegmentStrokeFull":
        CircleMeter_SegmentStrokeFull = bool(value)

    elif key == "CircleMeter_SegmentStrokeEmpty":
        CircleMeter_SegmentStrokeEmpty = bool(value)

    elif key == "CircleMeter_SegmentStrokeColor":
        CircleMeter_SegmentStrokeColor = value

    elif key == "CircleMeter_BackgroundColor":
        CircleMeter_BackgroundColor = value
        Dsp.CircleMeterGroup[idx].bg_color = value

    elif key == "update_interval":
        cpu_meter_update_interval = value

    elif key == "CircleMeter_Size":
        CircleMeterSize = float(value)
        UpdateMeterPosition(idx)

    elif key == "CircleMeter_Current_Name":
        CircleMeter_Current_Name = value

    elif key == "CircleMeter_Current_Bind":
        meter_objects[idx].setAttribute(key, value)
        meter_objects[idx].init_meter()

    elif key == "CircleMeter_Current_Mean":
        CircleMeter_Current_Mean = int(value)
        meter_objects[idx]._load_mean = int(value)
        update_meter_settings_global()

    elif key == "CircleMeter_Current_Min":
        CircleMeter_Current_Min = int(value)
        if CircleMeter_Current_Mean == int(value):
            CircleMeter_Current_Mean = int(value)+1
            meter_objects[idx]._load_mean = int(value)+1
        if CircleMeter_Current_Max == int(value)+1:
            CircleMeter_Current_Max = int(value)+2
            meter_objects[idx]._load_max = int(value)+2

        meter_objects[idx]._load_min = int(value)

        getattr(Prefs, "CircleMeter_Current_Mean").min = int(value)+1
        getattr(Prefs, "CircleMeter_Current_Mean").max = CircleMeter_Current_Max - 1
        getattr(Prefs, "CircleMeter_Current_Max").min = int(value)+2
        update_meter_settings_global()

    elif key == "CircleMeter_Current_Max":
        CircleMeter_Current_Max = int(value)
        if CircleMeter_Current_Mean == int(value):
            CircleMeter_Current_Mean = int(value)-1
            meter_objects[idx]._load_mean = int(value)-1
        if CircleMeter_Current_Min == int(value)-1:
            CircleMeter_Current_Min = int(value)-2
            meter_objects[idx]._load_min = int(value)-2

        meter_objects[idx]._load_max = int(value)

        getattr(Prefs, "CircleMeter_Current_Mean").min = CircleMeter_Current_Min + 1
        getattr(Prefs, "CircleMeter_Current_Mean").max = int(value)-1
        getattr(Prefs, "CircleMeter_Current_Min").max = int(value)-2
        update_meter_settings_global()


    elif meter_objects[idx].setAttribute(key, value):
        meter_objects[idx].init_meter()

    else:
        print "Warning! Unknown prefs: %s=%s" % (key, value)

    if key == "CircleMeter_Current_LabelFixedFont":
        Prefs.CircleMeter_Current_LabelColor.enabled = value

    save_configurations()


"""
#####################################################
#                                                   #
# Meter object class definition                     #
#                                                   #
#####################################################
"""
class SysMeter:
    def __init__(self, identification):
        self._id                  = int(identification)
        self._name                = INIT_NAME
        self._bind                = INIT_BIND
        self._load                = INIT_LOAD
        self._label_show          = INIT_LABEL_SHOW
        self._label_format        = INIT_LABEL_FORMAT
        self._fixed_font_color    = INIT_FIXED_COLOR
        self._label_font          = INIT_LABEL_FONT
        self._label_color         = INIT_LABEL_COLOR
        self._load_min            = 0
        self._load_mean           = 50
        self._load_max            = 100
        self._colors              = []

    def setAttribute(self, key, value):
        if key == "CircleMeter_Current_Name":
            self._name = value
        elif key == "CircleMeter_Current_Bind":
            self._bind = int(value)
        elif key == "CircleMeter_Current_LabelShow":
            self._label_show = bool(value)
        elif key == "CircleMeter_Current_LabelFormat":
            self._label_format = value
        elif key == "CircleMeter_Current_LabelFixedFont":
            self._fixed_font_color = bool(value)
        elif key == "CircleMeter_Current_LabelFont":
            self._label_font = value
        elif key == "CircleMeter_Current_LabelColor":
            self._label_color = value
        else:
            return False

        return True

    def make_colors(self):
      self._colors = []

      r1, g1, b1  = int(CircleMeter_SegmentColorMin[1:3],16),\
                    int(CircleMeter_SegmentColorMin[3:5],16),\
                    int(CircleMeter_SegmentColorMin[5:7],16)
      r2, g2, b2  = int(CircleMeter_SegmentColorMean[1:3],16),\
                    int(CircleMeter_SegmentColorMean[3:5],16),\
                    int(CircleMeter_SegmentColorMean[5:7],16)
      r3, g3, b3  = int(CircleMeter_SegmentColorMax[1:3],16),\
                    int(CircleMeter_SegmentColorMax[3:5],16),\
                    int(CircleMeter_SegmentColorMax[5:7],16)

      # we need to have at least 3 colors
      segment_span = float(self._load_max - self._load_min + 1) / float(CircleMeter_SegmentNumber)

      barrier = int(float(self._load_mean-self._load_min) / segment_span)

      # adjust barrier if mean value is too close to min or max
      if barrier == 0:
          barrier = 1
      if barrier == CircleMeter_SegmentNumber - 1:
          barrier = CircleMeter_SegmentNumber - 2

      # add the color for minimum value
      self._colors.append(CircleMeter_SegmentColorMin[0:7])

      # get the number of colors for the gradient between min and mean
      steps = barrier - 1
      if steps > 0:
          dr, db, dg = float(r2 - r1), float(b2 - b1), float(g2 - g1)
          step_r, step_g, step_b = dr/float(steps), dg/float(steps), db/float(steps)

          # add colors for values between min and mean
          for i in range(0, steps):
              str_r = hx(r1 + i*step_r)
              if len(str_r) < 2:  str_r = "0" + str_r
              str_g = hx(g1 + i*step_g)
              if len(str_g) < 2:  str_g = "0" + str_g
              str_b = hx(b1 + i*step_b)
              if len(str_b) < 2:  str_b = "0" + str_b
              # append to list of colors
              self._colors.append("#%s%s%s" % (str_r, str_g, str_b))

      # add color for the mean value
      self._colors.append(CircleMeter_SegmentColorMean[0:7])

      # get number of colors between mean and max
      steps = CircleMeter_SegmentNumber - 2 - barrier

      if steps > 0:
          dr, db, dg = float(r3 - r2), float(b3 - b2), float(g3 - g2)
          step_r, step_g, step_b = dr/float(steps), dg/float(steps),db/float(steps)

          for i in range(0,steps):
              str_r = hx(r2 + i*step_r)
              if len(str_r) < 2:  str_r = "0" + str_r
              str_g = hx(g2 + i*step_g)
              if len(str_g) < 2:  str_g = "0" + str_g
              str_b = hx(b2 + i*step_b)
              if len(str_b) < 2:  str_b = "0" + str_b
              # append to list of colors
              self._colors.append("#%s%s%s" % (str_r, str_g, str_b))

      # add color for maximum value
      self._colors.append(CircleMeter_SegmentColorMax[0:7])


    #
    # initializes the svg, i.e. creates it from given attributes
    # 
    def init_meter(self):
        curr_ang = CircleMeter_StartAngle
        step_angle\
          = float(CircleMeter_MaxAngle)\
              / float(CircleMeter_SegmentNumber)

        elements = range(0, CircleMeter_SegmentNumber)
        if not CircleMeter_Clockwise: elements.reverse()

        a = CircleMeter_RadiusX - CircleMeter_SegmentThickness
        b = CircleMeter_RadiusY - CircleMeter_SegmentThickness

        # create the svg image
        svg_code = "<svg width=\"100\" height=\"100\">"
        for i in elements:
            sin_1 = sine(curr_ang)
            cos_1 = cosine(curr_ang)
            sin_2 = sine(curr_ang + step_angle)
            cos_2 = cosine(curr_ang + step_angle)

            x1 = 50 + cos_1 * (CircleMeter_RadiusX)
            y1 = 50 + sin_1 * (CircleMeter_RadiusY)
            x2 = 50 + cos_2 * (CircleMeter_RadiusX)
            y2 = 50 + sin_2 * (CircleMeter_RadiusY)
            x3 = 50 + cos_2 * a
            y3 = 50 + sin_2 * b
            x4 = 50 + cos_1 * a
            y4 = 50 + sin_1 * b
            svg_code += SVG_PATH % (i, x4, y4, x1, y1,
                                    CircleMeter_RadiusX,\
                                    CircleMeter_RadiusY,\
                                    x2, y2, x3, y3,\
                                    CircleMeter_RadiusX,\
                                    CircleMeter_RadiusY,\
                                    x4, y4)
            curr_ang += step_angle
        svg_code += "</svg>"

        # init and update the svg dom
        getattr(Dsp, cm_canvas_id)[self._id].graphics = svg_code
        getattr(Dsp, cm_canvas_id)[self._id].dom.update()
        # update the label
        getattr(Dsp, cm_label_id)[self._id].color     = self._label_color
        getattr(Dsp, cm_label_id)[self._id].font      = self._label_font

    def update_meter(self):
        segment_span = float(self._load_max - self._load_min + 1) / float(CircleMeter_SegmentNumber)

        border = int(float(self._load-self._load_min) / segment_span)
        if border > CircleMeter_SegmentNumber-1:
            border = CircleMeter_SegmentNumber - 1
        if border < 0:
            border = 0

        if CircleMeter_SegmentBackgroundShow:
            bg_color = CircleMeter_SegmentBackgroundColor[0:7]
        else:
            bg_color = "None"

        if CircleMeter_SegmentStrokeFull:
            stroke_full_width = 1
            stroke_full_color = CircleMeter_SegmentStrokeColor[0:7]
        else:
            stroke_full_width = 0
            stroke_full_color = "None"

        if CircleMeter_SegmentStrokeEmpty:
            stroke_empty_width = 1
            stroke_empty_color = CircleMeter_SegmentStrokeColor[0:7]
        else:
            stroke_empty_width = 0
            stroke_empty_color = "None"

        for i in range(0, border+1):
            bar = getattr(Dsp, cm_canvas_id)[self._id].dom.get(\
                    "bar_%d" % i)

            if i < len(self._colors):
                bar["fill"] = self._colors[i]
            else:
                bar["fill"] = bg_color

            bar["stroke"]       = stroke_full_color
            bar["stroke-width"] = stroke_full_width

        if border+1 < CircleMeter_SegmentNumber:
            for i in range(border+1, CircleMeter_SegmentNumber):
                bar = getattr(Dsp, cm_canvas_id)[self._id].dom.get(\
                        "bar_%d" % i)

                bar["fill"]         = bg_color
                bar["stroke"]       = stroke_empty_color
                bar["stroke-width"] = stroke_empty_width

        # update label color
        if not self._fixed_font_color:
            getattr(Dsp, cm_label_id)[self._id].color\
              = self._colors[border]

        getattr(Dsp, cm_canvas_id)[self._id].dom.update()

main()
